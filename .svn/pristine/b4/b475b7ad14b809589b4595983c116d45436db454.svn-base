<?php

namespace common\models;

use Yii;
use common\models\base\BaseAvailability;
use common\models\query\AvailabilityQuery;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\db\ActiveQuery;
use common\components\customvalidators\CheckTimeFormatValidator;

/**
 * This is the model class for table "availability".
 *
 * @property integer $id
 * @property integer $user_id
 * @property string $on_date
 * @property string $from_time
 * @property string $to_time
 * @property string $created_at
 * @property string $updated_at
 *
 * @property Availability $availability
 */
class Availability extends BaseAvailability
{
    /**
     * @inheritdoc
     */
    public function rules() {
        return ArrayHelper::merge(
            parent::rules(),
            [
                ['slot_id','required','on' => ['editavailability','deleteavailability']],
                ['slot_id','integer','on' => ['editavailability','deleteavailability']]        
            ]);
    }
    
    /**
     * @inheritdoc
     */   
    public function attributeLabels() {
        return ArrayHelper::merge(
            parent::attributeLabels(),
            [
                    
            ]);
    }
    
    /**
     * Scenario for availability
     */
    
     public function scenarios()
    {           
        $scenarios = parent::scenarios();
        $scenarios['editavailability'] = ['slot_id', 'from_time','to_time','on_date'];
        $scenarios['deleteavailability'] = ['slot_id'];
        $scenarios['myavailability'] = ['on_date'];
        return $scenarios;
    }
    
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'attributes' => [
                \yii\db\ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                \yii\db\ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
                'value' => new Expression('NOW()'),
            ],
        ];
    }
    
    /**
     * @inheritdoc
     * @return \common\models\query\AvailabilityQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\query\AvailabilityQuery(get_called_class());
    }
    
    /**
     * Save data for available time slots
     */
    public function manageAvailableSlot($user_id = null)
    {   $slot_id = $this->slot_id;
        Yii::$app->db->createCommand('set foreign_key_checks=0')->execute();
        //$availability = new BaseAvailability();
        $availability = new Availability();
        if(empty($slot_id)) {
            
            $availability = $this->setValue($availability,$user_id);
            if($availability->save()) {
                Yii::$app->db->createCommand('set foreign_key_checks=1')->execute();
                $returndata = self::find()->select('id as slot_id,from_time,to_time')->ById($availability->id)->asArray()->one();
                return $returndata;
            } else {
                return false;
            }
        } else {
            
            $availability = self::findOne(['id' => $slot_id]);
            if(!empty($availability)) {
                $availability = $this->setValue($availability);
                $availability->update();
                Yii::$app->db->createCommand('set foreign_key_checks=1')->execute();
                return true;
            } else {
                return false;
            }
            return false;
        }
        
    }
    
    /**
     * Set the data values for the properties
     */
    
    public function setValue($availability,$id = null) 
    {
        if(!empty($id)) {
            $availability->user_id   = $id;
        }
        
        if(!empty($this->on_date)) {
            $availability->on_date = $this->on_date;
        }
        
        if(!empty($this->from_time)) {
            $availability->from_time = $this->from_time;
        }
        
        if(!empty($this->to_time)) {
            $availability->to_time   = $this->to_time;
        }
                
        return $availability;
    }
    
     /**
     * Get data for available time slots
     */
    public function getAvailableSlot()
    {   $on_date = $this->on_date;
        return self::find()->select("`id` AS `slot_id`, `from_time`,`to_time`")->ByDate($on_date)->asArray()->all();
    }
    
    /**
     * Arrange date format
     */
    public function getFormatedDate($on_date = null)
    {   $datarray = explode('-', $on_date);
        $on_date = $datarray['2'].'-'.$datarray['1'].'-'.$datarray['0']; 
        return $on_date;
    }
    
    /**
     * Delete an alloted time slot
     */
    public static function deleteSlot($slot_id = null)
    {         
        $model = self::find()->ById($slot_id)->one();
        if(!empty($model)) {
            return $model->delete();
        } else {
            return null;
        }
        
    }
}

